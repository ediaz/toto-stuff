/* This file is automatically generated. DO NOT EDIT! */

#ifndef _autofocus_h
#define _autofocus_h


typedef struct _Mar *Marchenko;


struct _Mar{
	    /* I/O files */
	    sf_file FF_arrival;
	    sf_file FRefl;
	    sf_file FGp;
	    sf_file FGm;
	    sf_file FG;
	    sf_file Ff1m;
	    sf_file Ff1p;
	    sf_file Ftwin;
      sf_file Fconvergence;
		/* Cube axes */
	    sf_axis at,af,ax,at1;
	    int     nt,nt2,nf,ntr,mode,nshots,niter,len;
	    int     i,it,ix,ishot,iter,i0;
	    int		twc, twa, shift, n[2], rect[2], s[2], tap;
	    float   scale,eps,dt,df,dx,ot,of,a,b,c,d,e,f,r;
    float *convergence;
		sf_triangle tr;
		bool verb,conj,twin,Pf1,PG;
    /* independent arrays */
    float  *F_arrival, *ms, *ms_0, *ms_2, *f1m_0, *f1m, *f1pS, *f1p; // time
    float  *MS, *MS_0, *MS1, *MS2, *F1m_0, *F1m, *F1m1, *F1pS, *F1p; // frequency
    /* output gf */
    float *G, *gp1, *gp, *gm1, *gm, *Gp, *Gm;
    float *window;
};


Marchenko  init_Marchenko(
     bool verb, bool conj,bool twin, bool Pf1, bool PG, int niter, int nshots, float r, float scale, float eps, int shift, int tap);
/*< >*/


void set_files(Marchenko mar);
/*< >*/


void set_axes_copy(Marchenko mar,Marchenko mar1);
/*< >*/


void set_axes(Marchenko mar);
/*< >*/


void set_output_files(Marchenko mar);
/*< >*/


void allocate_Arrays(Marchenko mar);
/*< >*/


void just_allocate_Arrays(Marchenko mar);
/*< >*/


void setFirstArrival( Marchenko mar, float *input);
/*< >*/


void allocate_Arrays_F(Marchenko mar, float *F_arrival);
/*< >*/


void zeroArrays(Marchenko mar);
/*< >*/


void  buildWindow(Marchenko mar);
/*< >*/


float* buildTaper(Marchenko mar);
/*< >*/


void initSolutions(Marchenko mar,float *Refl,float *taper);
/*< >*/


void iteration(Marchenko mar,float *Refl,float *taper);
/*< >*/


void iterations(Marchenko mar,float *Refl,float *taper);
/*< >*/


void buildF1p(Marchenko mar);
/*< >*/


void buildGpGmG(Marchenko mar, float *Refl, float *taper);
/*< >*/


void marchenko_close(Marchenko mar);
/*< >*/


void close_files(Marchenko mar);
/*< >*/

#endif

import os, sys, re, string
sys.path.append('/WORK/RSFSRC/framework')
import bldutil

progs = '''
helmLU
'''

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('/WORK/RSFSRC/api/c/SConstruct')

src = Glob('[a-z]*.c')

sparselibs = env.get('SPARSELIBS')

env.Prepend(CPPPATH=['/WORK/rsf/include'],
            LIBPATH=['/WORK/rsf/lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

if sparselibs:
    env.Prepend(LIBS=sparselibs)

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)

    if sparselibs:
        prog = env.Program(prog,map(lambda x: x + '.c',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='SPARSELIBS',package='suitesparse')
        
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
